# Contributor: Zack Siri <zack@artellectual.com>
# Maintainer: Zack Siri <zack@artellectual.com>
pkgname=nginx
pkgver=1.14.0
# Revision of nginx-tests to use for check().
_tests_hgrev=d6daf03478ad
_njs_ver=0.2.0

pkgrel=62
pkgdesc="HTTP and reverse proxy server (stable version)"
url="http://www.nginx.org/en"
arch="all"
license="BSD-2-Clause"
options="!check"
depends=""

makedepends="linux-headers gd-dev geoip-dev libxml2-dev libxslt-dev
	libressl-dev paxmark pcre-dev perl-dev pkgconf zlib-dev"
checkdepends="gd perl perl-fcgi perl-io-socket-ssl perl-net-ssleay
	perl-protocol-websocket tzdata uwsgi-python"

pkgusers="nginx"
_grp_ngx="nginx"
_grp_www="www-data"
pkggroups="$_grp_ngx $_grp_www"

install="
	$pkgname.post-install
  $pkgname.pre-install
  $pkgname.post-upgrade
"

subpackages="$pkgname-doc"
replaces="$pkgname-common $pkgname-initscripts $pkgname-lua $pkgname-rtmp"
source="http://nginx.org/download/$pkgname-$pkgver.tar.gz
	$pkgname-tests-$_tests_hgrev.tar.gz::http://hg.nginx.org/nginx-tests/archive/$_tests_hgrev.tar.gz
	$pkgname-njs-$_njs_ver.tar.gz::https://hg.nginx.org/njs/archive/$_njs_ver.tar.gz
	njs~fix-test-exit-code.patch
	nginx.conf
  default.conf
	$pkgname.logrotate
	$pkgname.initd
  bin/config_nginx
  service/run
"

builddir="$srcdir/$pkgname-$pkgver"
_modules_dir="usr/lib/$pkgname/modules"
_stream_js_depends="$pkgname-mod-stream"

# luajit is not available for s390x.
case "$CARCH" in
	s390x) makedepends="$makedepends lua5.1-dev";;
	*) makedepends="$makedepends luajit-dev";;
esac

# Built-in dynamic modules
for _mod in \
	http-geoip \
	http-image-filter \
	http-js \
	http-perl \
	http-xslt-filter \
	mail \
	stream \
	stream-geoip \
	stream-js
do
	subpackages="$subpackages $pkgname-mod-$_mod:_module"
done

# Third Party Modules

# Third-party dynamic modules

# For simplicity we assume that module is hosted on GitHub.
_add_module() {
	local name="$1" ver="$2" url="$3"
	local dirname="${url##*/}-${ver#v}"

	subpackages="$subpackages $pkgname-mod-$name:_module"
	source="$source $dirname.tar.gz::$url/archive/$ver.tar.gz"
	_extra_flags="$_extra_flags --add-dynamic-module=$srcdir/$dirname"
}

_add_module "devel-kit" "v0.3.0" "https://github.com/simpl/ngx_devel_kit"
_devel_kit_so="ndk_http_module.so"

_add_module "secure-token-module" "1.3" "https://github.com/kaltura/nginx-secure-token-module"
_secure_token_module_so="ngx_http_secure_token_filter_module.so"

_add_module "vod-module" "1.24" "https://github.com/kaltura/nginx-vod-module"
_vod_module_so="ngx_http_vod_module.so"
_vod_module_depends="ffmpeg"
_vod_module_install_if="$pkgname@upmaru"

_add_module "http-cache-purge" "2.4.2" "https://github.com/nginx-modules/ngx_cache_purge"

_add_module "http-echo" "v0.61" "https://github.com/openresty/echo-nginx-module"

_add_module "http-fancyindex" "v0.4.2" "https://github.com/aperezdc/ngx-fancyindex"

_add_module "http-headers-more" "v0.33" "https://github.com/openresty/headers-more-nginx-module"
_http_headers_more_so="ngx_http_headers_more_filter_module.so"

_add_module "http-lua" "v0.10.12" "https://github.com/openresty/lua-nginx-module"
_http_lua_depends="$pkgname-mod-devel-kit"
_http_lua_provides="$pkgname-lua"  # for backward compatibility
_http_lua_install_if="$pkgname@upmaru"

_add_module "http-lua-upstream" "v0.07" "https://github.com/openresty/lua-upstream-nginx-module"
_http_lua_upstream_depends="$pkgname-mod-http-lua"

_add_module "http-nchan" "v1.1.14" "https://github.com/slact/nchan"
_http_nchan_so="ngx_nchan_module.so"

_add_module "http-shibboleth" "v2.0.1" "https://github.com/nginx-shib/nginx-http-shibboleth"

_add_module "http-redis2" "v0.15" "https://github.com/openresty/redis2-nginx-module"

_add_module "http-set-misc" "v0.32" "https://github.com/openresty/set-misc-nginx-module"
_http_set_misc_depends="$pkgname-mod-devel-kit"

_add_module "http-upload-progress" "v0.9.2" "https://github.com/masterzen/nginx-upload-progress-module"
_http_upload_progress_so="ngx_http_uploadprogress_module.so"

_add_module "http-upstream-fair" "0.1.3" "https://github.com/itoffshore/nginx-upstream-fair"

_add_module "rtmp" "v1.2.1" "https://github.com/arut/nginx-rtmp-module"
_rtmp_provides="$pkgname-rtmp"  # for backward compatibility

prepare() {
	local file; for file in $source; do
		case $file in
		*~*.patch)
			msg $file
			cd "$srcdir"/${file%%~*}-*
			patch -p 1 -i "$srcdir/$file"
			;;
		*.patch)
			msg $file
			cd "$builddir"
			patch -p 1 -i "$srcdir/$file"
			;;
		esac
	done

	# This test requires superuser privileges and CAP_NET_ADMIN.
	rm "$srcdir"/nginx-tests-*/proxy_bind_transparent.t
	rm "$srcdir"/nginx-tests-*/proxy_bind_transparent_capability.t
}

build() {
	cd "$builddir"

	export LUAJIT_LIB="$(pkgconf --variable=libdir luajit)"
	export LUAJIT_INC="$(pkgconf --variable=includedir luajit)"
	./configure \
		--prefix=/var/lib/$pkgname \
		--sbin-path=/usr/sbin/$pkgname \
		--modules-path=/$_modules_dir \
		--conf-path=/etc/$pkgname/$pkgname.conf \
		--pid-path=/run/$pkgname/$pkgname.pid \
		--lock-path=/run/$pkgname/$pkgname.lock \
		--http-client-body-temp-path=/var/tmp/$pkgname/client_body \
		--http-proxy-temp-path=/var/tmp/$pkgname/proxy \
		--http-fastcgi-temp-path=/var/tmp/$pkgname/fastcgi \
		--http-uwsgi-temp-path=/var/tmp/$pkgname/uwsgi \
		--http-scgi-temp-path=/var/tmp/$pkgname/scgi \
		--with-perl_modules_path=/usr/lib/perl5/vendor_perl \
		\
		--user=$pkgusers \
		--group=$_grp_ngx \
		--with-threads \
		--with-file-aio \
		\
		--with-http_ssl_module \
		--with-http_v2_module \
		--with-http_realip_module \
		--with-http_addition_module \
		--with-http_xslt_module=dynamic \
		--with-http_image_filter_module=dynamic \
		--with-http_geoip_module=dynamic \
		--with-http_sub_module \
		--with-http_dav_module \
		--with-http_flv_module \
		--with-http_mp4_module \
		--with-http_gunzip_module \
		--with-http_gzip_static_module \
		--with-http_auth_request_module \
		--with-http_random_index_module \
		--with-http_secure_link_module \
		--with-http_degradation_module \
		--with-http_slice_module \
		--with-http_stub_status_module \
		--with-http_perl_module=dynamic \
		--with-mail=dynamic \
		--with-mail_ssl_module \
		--with-stream=dynamic \
		--with-stream_ssl_module \
		--with-stream_realip_module \
		--with-stream_geoip_module=dynamic \
		--with-stream_ssl_preread_module \
		\
		--add-dynamic-module="$srcdir/njs-$_njs_ver/nginx" \
		$_extra_flags

	make
}

check() {
	msg "Running nginx tests..."
	cd "$srcdir"/nginx-tests-*
	TEST_NGINX_BINARY="$builddir/objs/nginx" prove .

	msg "Running njs tests..."
	cd "$srcdir"/njs-*
	make test
}

package() {
  cd "$builddir"

  make DESTDIR="$pkgdir" install

  # Disable some PaX protections; this is needed for Lua module.
  local paxflags="-m"
  [ "$CARCH" = "x86" ] && paxflags="-msp"
  paxmark $paxflags "$pkgdir"/usr/sbin/nginx

  install -Dm644 LICENSE "$pkgdir"/usr/share/licenses/$pkgname/LICENSE
  install -Dm644 README "$pkgdir"/usr/share/doc/$pkgname/README

  install -Dm644 objs/$pkgname.8 \
    "$pkgdir"/usr/share/man/man8/$pkgname.8

  local name; for name in ngx_devel_kit; do
    cp -r "$srcdir"/$name-*/doc* \
      "$pkgdir"/usr/share/doc/$pkgname/$name
  done

  cd "$pkgdir"

  install -Dm644 "$srcdir"/nginx.conf ./etc/$pkgname/nginx.conf
  install -Dm644 "$srcdir"/default.conf ./etc/$pkgname/conf.d/default.conf
  install -Dm755 "$srcdir"/$pkgname.initd ./etc/init.d/$pkgname
  install -Dm644 "$srcdir"/$pkgname.logrotate ./etc/logrotate.d/$pkgname
  install -Dm755 "$srcdir"/run ./etc/$pkgname/service/run
  install -Dm755 "$srcdir"/config_nginx ./usr/bin/config_nginx
  install -Dm644 "$srcdir"/$pkgname.logrotate ./etc/logrotate.d/$pkgname

  install -dm755 ./etc/$pkgname/modules
  install -dm750 -o $pkgusers -g $_grp_ngx ./var/lib/$pkgname
  install -dm700 -o $pkgusers -g $_grp_ngx ./var/tmp/$pkgname
  install -dm755 -g $_grp_www ./var/www/localhost/htdocs

  install -dm755 ./var/log
  mv ./var/lib/$pkgname/logs ./var/log/$pkgname

  ln -sf /$_modules_dir ./var/lib/$pkgname/modules
  ln -sf /var/log/$pkgname ./var/lib/$pkgname/logs
  ln -sf /var/tmp/$pkgname ./var/lib/$pkgname/tmp
  ln -sf /run/$pkgname ./var/lib/$pkgname/run

  # Remove archaic charset maps.
  rm ./etc/$pkgname/koi-* ./etc/$pkgname/win-utf

  rm -rf ./run ./etc/$pkgname/*.default
}

_module() {
  local name="${subpkgname#$pkgname-mod-}"
  name="${name//-/_}"
  local soname="$(eval "echo \$_${name}_so")";
  soname="${soname:-ngx_${name}_module.so"}"

  pkgdesc="$pkgdesc (module $name)"
  depends="$pkgname $(eval "echo \$_${name}_depends")"
  provides="$(eval "echo \$_${name}_provides")"

  mkdir -p "$subpkgdir"/$_modules_dir
  cd "$subpkgdir"

  mv "$pkgdir"/$_modules_dir/$soname ./$_modules_dir/$soname || return 1

  mkdir -p "$subpkgdir"/etc/nginx/modules
  echo "load_module \"modules/$soname\";" > ./etc/nginx/modules/$name.conf
}
